package pr.tongson.lib.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import pr.tongson.lib.greendao.entity.Plan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "T_PLAN_A_TABLE".
*/
public class PlanDao extends AbstractDao<Plan, Long> {

    public static final String TABLENAME = "T_PLAN_A_TABLE";

    /**
     * Properties of entity Plan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Detial = new Property(2, String.class, "detial", false, "DETIAL");
        public final static Property TypeA = new Property(3, Integer.class, "typeA", false, "TYPE_A");
        public final static Property TypeB = new Property(4, Integer.class, "typeB", false, "TYPE_B");
        public final static Property Repeat = new Property(5, boolean.class, "repeat", false, "REPEAT");
        public final static Property RepeatDay = new Property(6, String.class, "repeatDay", false, "REPEAT_DAY");
        public final static Property Time = new Property(7, String.class, "time", false, "TIME");
        public final static Property Date = new Property(8, String.class, "date", false, "DATE");
        public final static Property Status = new Property(9, int.class, "status", false, "STATUS");
        public final static Property Extra = new Property(10, String.class, "extra", false, "EXTRA");
    }


    public PlanDao(DaoConfig config) {
        super(config);
    }
    
    public PlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"T_PLAN_A_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"DETIAL\" TEXT," + // 2: detial
                "\"TYPE_A\" INTEGER," + // 3: typeA
                "\"TYPE_B\" INTEGER," + // 4: typeB
                "\"REPEAT\" INTEGER NOT NULL ," + // 5: repeat
                "\"REPEAT_DAY\" TEXT," + // 6: repeatDay
                "\"TIME\" TEXT," + // 7: time
                "\"DATE\" TEXT," + // 8: date
                "\"STATUS\" INTEGER NOT NULL ," + // 9: status
                "\"EXTRA\" TEXT);"); // 10: extra
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"T_PLAN_A_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Plan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String detial = entity.getDetial();
        if (detial != null) {
            stmt.bindString(3, detial);
        }
 
        Integer typeA = entity.getTypeA();
        if (typeA != null) {
            stmt.bindLong(4, typeA);
        }
 
        Integer typeB = entity.getTypeB();
        if (typeB != null) {
            stmt.bindLong(5, typeB);
        }
        stmt.bindLong(6, entity.getRepeat() ? 1L: 0L);
 
        String repeatDay = entity.getRepeatDay();
        if (repeatDay != null) {
            stmt.bindString(7, repeatDay);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(9, date);
        }
        stmt.bindLong(10, entity.getStatus());
 
        String extra = entity.getExtra();
        if (extra != null) {
            stmt.bindString(11, extra);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Plan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String detial = entity.getDetial();
        if (detial != null) {
            stmt.bindString(3, detial);
        }
 
        Integer typeA = entity.getTypeA();
        if (typeA != null) {
            stmt.bindLong(4, typeA);
        }
 
        Integer typeB = entity.getTypeB();
        if (typeB != null) {
            stmt.bindLong(5, typeB);
        }
        stmt.bindLong(6, entity.getRepeat() ? 1L: 0L);
 
        String repeatDay = entity.getRepeatDay();
        if (repeatDay != null) {
            stmt.bindString(7, repeatDay);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(9, date);
        }
        stmt.bindLong(10, entity.getStatus());
 
        String extra = entity.getExtra();
        if (extra != null) {
            stmt.bindString(11, extra);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Plan readEntity(Cursor cursor, int offset) {
        Plan entity = new Plan( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // detial
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // typeA
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // typeB
            cursor.getShort(offset + 5) != 0, // repeat
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // repeatDay
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // date
            cursor.getInt(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // extra
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Plan entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDetial(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTypeA(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTypeB(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setRepeat(cursor.getShort(offset + 5) != 0);
        entity.setRepeatDay(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.getInt(offset + 9));
        entity.setExtra(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Plan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Plan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Plan entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
